truncado(123)
int truncado(int n) {
    return n / 10;
}
truncado(123)
truncado(456)
truncado(9)
truncado(0)
int últimoDígito( int n ) {
    return n % 10;
}
últimoDígito(123)
últimoDígito(456)
últimoDígito(9)
últimoDígito(0)
últimoDígito(0)
últimoDígito(1)
últimoDígito(5)
últimoDígito(9)
últimoDígito(10)
últimoDígito(88)
boolean únicoDígito( int n ) {
    return ( n >= 0 ) && ( n < 10 );
}
únicoDígito(88)
únicoDígito(10)
únicoDígito(10)
únicoDígito(9)
únicoDígito(8)
únicoDígito(1)
únicoDígito(0)
String signo( int n ) {
    return ( n >= 0 ) ? "no_negativo" : "negativo";
}
signo(-1)
signo(1)
signo(10)
boolean esPar( int n ) {
    return ( n % 2 ) == 0;
}
esPar(2)
esPar(0)
esPar(3)
esPar(13)
esPar(5)
esPar(4)
boolean esImpar( int n ) {
    return !esPar(n);
}
esPar(4)
esImpar(4)
esImpar(2)
esImpar(13)
int diferencia(int a, int b) {
    return a - b;
}
int suma(int a, int b) {
    return a + b;
}
diferenciaDeCuadrados(3, 2)
diferenciaDeCuadrados(1,1)
diferenciaDeCuadrados(0,0)
diferenciaDeCuadrados(1,1)
diferenciaDeCuadrados(3,2)
diferenciaDeCuadrados(3,0)
int diferenciaDeCuadrados( int a, int b ) {
    return  diferencia(a, b) * suma(a, b);
}
diferenciaDeCuadrados(3,2)
diferenciaDeCuadrados(1,1)
double tercerÁngulo( double a, double b) {
    return 180 - (a + b);
}
tercerÁngulo(60.0, 60.0)
tercerÁngulo(45.0, 90.0)
tercerÁngulo(35.0, 50.0)
boolean validarMúltiploDe7( int n ) {
return ( (n / 7 ) > 0 ) && ( ( n / 7 ) < 1_000 );
}
validarMúltiploDe7(-7)
validarMúltiploDe7(0)
validarMúltiploDe7(91)
validarMúltiploDe7(9100)
boolean validar( int inicio, int mitad, int tamano) {
    return ( inicio >= 0 ) && ( inicio < mitad ) && ( mitad < tamano);
}
validar(0,1,2)
validar(1,1,2)
validar(2,1,2)
validar(0,3,3)
validar(1,3,5)
double tarifa( int minutos ) {
    return minutos * 10.0;
}
double cobroMinimo( int minutos ) {
    return ( tarifa(minutos) >= 100 ) ? tarifa(minutos) : 100.0;
}
double cobroMaximo( int minutos ) { 
    return ( tarifa(minutos) >= 3_000 ) ? 3_000.0 : cobroMinimo(minutos);
}
double cobro( int minutos ) {
    return cobroMaximo(minutos);
}
cobro(1)
cobro(10)
cobro(15)
cobro(90)
cobro(1_000)  